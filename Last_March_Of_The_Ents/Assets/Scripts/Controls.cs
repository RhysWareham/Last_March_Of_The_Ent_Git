//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""PlayControls"",
            ""id"": ""e11a0096-ea84-4e3b-ad09-f71cef909660"",
            ""actions"": [
                {
                    ""name"": ""LeftArm"",
                    ""type"": ""Button"",
                    ""id"": ""811ca89d-e99e-4fba-96b9-67953d7e6f91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightArm"",
                    ""type"": ""Button"",
                    ""id"": ""f43c128e-15a5-43fb-92b0-2966efd9a559"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftLeg"",
                    ""type"": ""Button"",
                    ""id"": ""672af230-1b26-40bc-8b26-4bbe8399a242"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightLeg"",
                    ""type"": ""Button"",
                    ""id"": ""af2e9c2a-2f27-42b6-8a9f-9b415d92f1ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""9fed2231-1f5c-422d-8ff1-f4ea7fc02ba2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""13ab6112-1be1-4be6-894c-ca99d1e2cd15"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cac1faa8-d172-4d02-96a3-08bce44dd639"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightArm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60509ca8-1e55-4485-b585-64600a5c40de"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftLeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bcd5ba4-b483-474d-bb80-9a2988e8ddfe"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightLeg"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""114b660d-e234-4520-9efb-1f503dba7b8e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayControls
        m_PlayControls = asset.FindActionMap("PlayControls", throwIfNotFound: true);
        m_PlayControls_LeftArm = m_PlayControls.FindAction("LeftArm", throwIfNotFound: true);
        m_PlayControls_RightArm = m_PlayControls.FindAction("RightArm", throwIfNotFound: true);
        m_PlayControls_LeftLeg = m_PlayControls.FindAction("LeftLeg", throwIfNotFound: true);
        m_PlayControls_RightLeg = m_PlayControls.FindAction("RightLeg", throwIfNotFound: true);
        m_PlayControls_Reset = m_PlayControls.FindAction("Reset", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayControls
    private readonly InputActionMap m_PlayControls;
    private IPlayControlsActions m_PlayControlsActionsCallbackInterface;
    private readonly InputAction m_PlayControls_LeftArm;
    private readonly InputAction m_PlayControls_RightArm;
    private readonly InputAction m_PlayControls_LeftLeg;
    private readonly InputAction m_PlayControls_RightLeg;
    private readonly InputAction m_PlayControls_Reset;
    public struct PlayControlsActions
    {
        private @Controls m_Wrapper;
        public PlayControlsActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftArm => m_Wrapper.m_PlayControls_LeftArm;
        public InputAction @RightArm => m_Wrapper.m_PlayControls_RightArm;
        public InputAction @LeftLeg => m_Wrapper.m_PlayControls_LeftLeg;
        public InputAction @RightLeg => m_Wrapper.m_PlayControls_RightLeg;
        public InputAction @Reset => m_Wrapper.m_PlayControls_Reset;
        public InputActionMap Get() { return m_Wrapper.m_PlayControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayControlsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayControlsActions instance)
        {
            if (m_Wrapper.m_PlayControlsActionsCallbackInterface != null)
            {
                @LeftArm.started -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnLeftArm;
                @LeftArm.performed -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnLeftArm;
                @LeftArm.canceled -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnLeftArm;
                @RightArm.started -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnRightArm;
                @RightArm.performed -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnRightArm;
                @RightArm.canceled -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnRightArm;
                @LeftLeg.started -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnLeftLeg;
                @LeftLeg.performed -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnLeftLeg;
                @LeftLeg.canceled -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnLeftLeg;
                @RightLeg.started -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnRightLeg;
                @RightLeg.performed -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnRightLeg;
                @RightLeg.canceled -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnRightLeg;
                @Reset.started -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_PlayControlsActionsCallbackInterface.OnReset;
            }
            m_Wrapper.m_PlayControlsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftArm.started += instance.OnLeftArm;
                @LeftArm.performed += instance.OnLeftArm;
                @LeftArm.canceled += instance.OnLeftArm;
                @RightArm.started += instance.OnRightArm;
                @RightArm.performed += instance.OnRightArm;
                @RightArm.canceled += instance.OnRightArm;
                @LeftLeg.started += instance.OnLeftLeg;
                @LeftLeg.performed += instance.OnLeftLeg;
                @LeftLeg.canceled += instance.OnLeftLeg;
                @RightLeg.started += instance.OnRightLeg;
                @RightLeg.performed += instance.OnRightLeg;
                @RightLeg.canceled += instance.OnRightLeg;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
            }
        }
    }
    public PlayControlsActions @PlayControls => new PlayControlsActions(this);
    public interface IPlayControlsActions
    {
        void OnLeftArm(InputAction.CallbackContext context);
        void OnRightArm(InputAction.CallbackContext context);
        void OnLeftLeg(InputAction.CallbackContext context);
        void OnRightLeg(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
}
